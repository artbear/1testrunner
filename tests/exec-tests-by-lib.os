#Использовать ".."

#Использовать logos
#Использовать asserts

Перем юТест;
Перем Лог;

//{ подготовка тестов

Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	
	юТест = ЮнитТестирование;
	
	ВсеТесты = Новый Массив;
	
	ВсеТесты.Добавить("ТестДолжен_ПроверитьУспешныйТест");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьЗапускТестовКаталога");
	
	ВсеТесты.Добавить("ТестДолжен_ПроверитьВыполнениеПараметризованныхТестов");
	
	ВсеТесты.Добавить("ТестДолжен_ПроверитьСинтаксическиНеверныйТест");

	Возврат ВсеТесты;
КонецФункции

Процедура ПередЗапускомТеста() Экспорт
	ВремТестер = Новый Тестер;
	Лог = Логирование.ПолучитьЛог(ВремТестер.ИмяЛога());

	// ВключитьПоказОтладки();
КонецПроцедуры

Процедура ПослеЗапускаТеста() Экспорт
	
КонецПроцедуры
//}

//{ tests

Процедура ТестДолжен_ПроверитьУспешныйТест() Экспорт

	ПутьФайлаТеста = ОбъединитьПути(КаталогТестовыхФикстур(), "simple.os");

	Тестер = Новый Тестер;
	РезультатТестирования = Тестер.ТестироватьФайл(Новый Файл(ПутьФайлаТеста));
	
	ПроверитьРезультат(Тестер, РезультатТестирования);
КонецПроцедуры

Процедура ТестДолжен_ПроверитьЗапускТестовКаталога() Экспорт
	Тестер = Новый Тестер;
	РезультатТестирования = Тестер.ТестироватьКаталог(Новый Файл(КаталогТестовыхФикстур()));
	
	ПроверитьРезультат(Тестер, РезультатТестирования);
КонецПроцедуры

Процедура ТестДолжен_ПроверитьВыполнениеПараметризованныхТестов() Экспорт
	
	ПутьФайлаТеста = ОбъединитьПути(КаталогТестовыхФикстур(), "add.os");
	
	Тестер = Новый Тестер;
	РезультатТестирования = Тестер.ТестироватьФайл(Новый Файл(ПутьФайлаТеста));
	
	ПроверитьРезультат(Тестер, РезультатТестирования);
КонецПроцедуры

Процедура ТестДолжен_ПроверитьСинтаксическиНеверныйТест() Экспорт

	ПутьФайлаТеста = ОбъединитьПути(КаталогПадающихТестовыхФикстур(), "bad-syntax.os");

	Тестер = Новый Тестер;
	РезультатТестирования = Тестер.ТестироватьФайл(Новый Файл(ПутьФайлаТеста));
	
	ПроверитьРезультат(Тестер, РезультатТестирования, Тестер.ЗначенияСостоянияТестов().Сломался);
КонецПроцедуры

//}

//{ helpers

Процедура ПроверитьРезультат(Знач Тестер, Знач РезультатТестирования, Знач ОжидаемыйРезультат = Неопределено)

	Если ОжидаемыйРезультат = Неопределено Тогда
		ОжидаемыйРезультат = Тестер.ЗначенияСостоянияТестов().Прошел;
	КонецЕсли;

	Ожидаем.Что(Тестер.ПолучитьРезультатТестирования(), 
		"Ожидали, что Тестер.ПолучитьРезультатТестирования() равен РезультатТестирования, а получили другое значение")
		.Равно(РезультатТестирования);

	Ожидаем.Что(Тестер.ПолучитьРезультатТестирования(), 
		"Ожидали, что получим результат тестирования 0 ( `Прошел` ), а получили другое значение")
		.Равно(ОжидаемыйРезультат);
КонецПроцедуры

Процедура ВключитьПоказОтладки()
	Лог.УстановитьУровень(УровниЛога.Отладка);
КонецПроцедуры

Процедура ВыключитьПоказОтладки()
	Лог.УстановитьУровень(УровниЛога.Информация);
КонецПроцедуры

Функция КаталогТестовыхФикстур() Экспорт
	Возврат ОбъединитьПути(КаталогТестов(), "fixtures");
КонецФункции // КаталогИсходников()

Функция КаталогПадающихТестовыхФикстур() Экспорт
	Возврат ОбъединитьПути(КаталогТестов(), "bad-fixtures");
КонецФункции // КаталогИсходников()

Функция КаталогТестов() Экспорт
	Возврат ОбъединитьПути(КаталогИсходников(), "tests");
КонецФункции // КаталогИсходников()

Функция КаталогИсходников() Экспорт
	Возврат ОбъединитьПути(ТекущийСценарий().Каталог, "..");
КонецФункции // КаталогИсходников()

//}