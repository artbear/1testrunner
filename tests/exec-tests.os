#Использовать logos
#Использовать asserts
#Использовать 1commands

Перем юТест;
Перем Лог;

Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт

	юТест = ЮнитТестирование;

	ВсеТесты = Новый Массив;

	ВсеТесты.Добавить("ТестДолжен_ПроверитьУспешныйТест");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьЗапускТестовКаталога");

	ВсеТесты.Добавить("ТестДолжен_ПроверитьВыводПараметризированныхТестов");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьВыполнениеПараметризованныхТестов");

	Возврат ВсеТесты;
КонецФункции

Процедура ПередЗапускомТеста() Экспорт
	// ВключитьПоказОтладки();
КонецПроцедуры

Процедура ПослеЗапускаТеста() Экспорт

КонецПроцедуры

Процедура ТестДолжен_ПроверитьУспешныйТест() Экспорт

	ПутьФайлаТеста = ОбъединитьПути(КаталогТестовыхФикстур(), "simple.os");

	ЯВыполняюКомандуПродуктаCПередачейПараметров("-run", ПутьФайлаТеста);
КонецПроцедуры

Процедура ТестДолжен_ПроверитьЗапускТестовКаталога() Экспорт
	ЯВыполняюКомандуПродуктаCПередачейПараметров("-runall", КаталогТестовыхФикстур());
КонецПроцедуры

Процедура ТестДолжен_ПроверитьВыводПараметризированныхТестов() Экспорт

	СтрВывод = "";

	ПутьФайлаТеста = ОбъединитьПути(КаталогТестовыхФикстур(), "add.os");

	ЯВыполняюКомандуПродуктаCПередачейПараметров("-show", ПутьФайлаТеста, Неопределено, СтрВывод);

	Ожидаем.Что(СтрВывод).Содержит("<ТестДолжен_ПроверитьСложение{А:""2"", Б:""2"", Результат:""4""}>");
	Ожидаем.Что(СтрВывод).Содержит("<ТестДолжен_ПроверитьСложение{А:""2"", Б:""3"", Результат:""5""}>");

КонецПроцедуры

Процедура ТестДолжен_ПроверитьВыполнениеПараметризованныхТестов() Экспорт

	ПутьФайлаТеста = ОбъединитьПути(КаталогТестовыхФикстур(), "add.os");

	ЯВыполняюКомандуПродуктаCПередачейПараметров("-run", ПутьФайлаТеста);

КонецПроцедуры

Процедура ВключитьПоказОтладки()
	Лог.УстановитьУровень(УровниЛога.Отладка);
КонецПроцедуры

Процедура ВыключитьПоказОтладки()
	Лог.УстановитьУровень(УровниЛога.Информация);
КонецПроцедуры

Процедура ЯВыполняюКомандуПродуктаCПередачейПараметров(Знач КомандаТестера, Знач ПараметрыКоманды,
	Знач ОжидаемыйКодВозврата = Неопределено, ТекстВывода = "")

	ПутьСтартера = ОбъединитьПути(КаталогИсходников(), "src", "main.os");
	ФайлСтартера = Новый Файл(ПутьСтартера);
	Ожидаем.Что(ФайлСтартера.Существует(), "Ожидаем, что скрипт-стартер <main.os> существует, а его нет. "
		+ ФайлСтартера.ПолноеИмя).Равно(Истина);

	СтрокаКоманды = СтрШаблон("oscript -encoding=utf-8 %1 %2 %3", ПутьСтартера, КомандаТестера, ПараметрыКоманды);

	Команда = Новый Команда;

	Команда.УстановитьСтрокуЗапуска(СтрокаКоманды);
	Команда.УстановитьКодировкуВывода(КодировкаТекста.UTF8);
	КодВозврата = Команда.Исполнить();
	ТекстВывода = Команда.ПолучитьВывод();

	Лог.Отладка(ТекстВывода);

	Если ОжидаемыйКодВозврата <> Неопределено И КодВозврата <> ОжидаемыйКодВозврата
			ИЛИ Лог.Уровень() <= УровниЛога.Отладка  Тогда
		ВывестиТекст(ТекстВывода);
		Ожидаем.Что(КодВозврата, "Код возврата в ЯВыполняюКомандуПродуктаCПередачейПараметров")
			.Равно(ОжидаемыйКодВозврата);
	КонецЕсли;
КонецПроцедуры

Процедура ВывестиТекст(Знач Строка)

	Лог.Отладка("");
	Лог.Отладка("  ----------------    ----------------    ----------------  ");
	Лог.Отладка( Строка );
	Лог.Отладка("  ----------------    ----------------    ----------------  ");
	Лог.Отладка("");

КонецПроцедуры

Функция КаталогТестовыхФикстур() Экспорт
	Возврат ОбъединитьПути(КаталогТестов(), "fixtures");
КонецФункции // КаталогИсходников()

Функция КаталогТестов() Экспорт
	Возврат ОбъединитьПути(КаталогИсходников(), "tests");
КонецФункции // КаталогИсходников()

Функция КаталогИсходников() Экспорт
	Возврат ОбъединитьПути(ТекущийСценарий().Каталог, "..");
КонецФункции // КаталогИсходников()

Лог = Логирование.ПолучитьЛог("1testrunner.tests");
